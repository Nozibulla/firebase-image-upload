{"version":3,"sources":["init.js","firebase.config.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","firestore","storage","settings","timestampsInSnapshots","getThumbUrl","imageUrl","imageName","substr","lastIndexOf","thumbImageName","concat","extractedUrl","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","image","onDrop","Images","console","log","setState","sendToFirebase","length","imageRef","ref","name","uploadTask","put","on","snapshot","progress","bytesTransferred","totalBytes","error","code","getDownloadURL","then","downloadURL","thumb","react_default","a","createElement","es","_ref","getRootProps","getInputProps","isDragActive","assign","className","classNames","dropzone--isActive","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAKAA,IAASC,cCLM,CACbC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,iBDCrB,IAAMC,EAAKR,IAASS,YACdC,EAAUV,IAASU,UAEzBF,EAAGG,SAAS,CACVC,uBAAuB,IAGzB,IAAMC,EAAc,SAAAC,GAClB,IAAMC,EAAYD,EAASE,OAAOF,EAASG,YAAY,KAAO,GACxDC,EAAc,SAAAC,OAAYJ,GAC1BK,EAAeN,EAASE,OAAO,EAAGF,EAASG,YAAY,KAAO,GAEpE,MADc,GAAAE,OAAMC,GAAND,OAAqBD,IEiFtBG,cA7Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAERQ,MAAQ,CACNC,MAAO,IAJUR,EAMnBS,OAAS,SAAAC,GACPC,QAAQC,IAAIF,GACZV,EAAKa,SAAS,CAAEL,MAAOE,KARNV,EAUnBc,eAAiB,WAAM,IACbN,EAAUR,EAAKO,MAAfC,MACR,GAAIA,EAAMO,OAAQ,CAChB,IAAIC,EAAW7B,EAAQ8B,IAAIT,EAAM,GAAGU,MACpC,IACE,IAAMC,EAAaH,EAASI,IAAIZ,EAAM,IACtCW,EAAWE,GACT,gBACA,SAASC,GACP,IAAIC,EACDD,EAASE,iBAAmBF,EAASG,WAAc,IAEtD,OADAd,QAAQC,IAAI,aAAeW,EAAW,UAC9BD,EAASf,OACf,IAAK,SACHI,QAAQC,IAAI,oBACZ,MACF,IAAK,UACHD,QAAQC,IAAI,uBAIlB,SAASc,GACP,OAAQA,EAAMC,MACZ,IAAK,uBACHhB,QAAQC,IAAI,YACZ,MAEF,IAAK,mBACHD,QAAQC,IAAI,aACZ,MAEF,IAAK,kBACHD,QAAQC,IAAI,aAIlB,WAEEO,EAAWG,SAASL,IACjBW,iBACAC,KAAK,SAASC,GACbnB,QAAQC,IAAI,oBAAqBkB,GACjC,IAAMC,EAAQzC,EAAYwC,GAC1BnB,QAAQC,IAAImB,EAAO,aAI3B,MAAOL,GACPf,QAAQe,MAAMA,MA1DD1B,wEA+DjB,OACEgC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAU1B,OAAQN,KAAKM,QACpB,SAAA2B,GAAmD,IAAhDC,EAAgDD,EAAhDC,aAAcC,EAAkCF,EAAlCE,cAAeC,EAAmBH,EAAnBG,aAC/B,OACEP,EAAAC,EAAAC,cAAA,MAAAjC,OAAAuC,OAAA,GACMH,IADN,CAEEI,UAAWC,IAAW,WAAY,CAChCC,qBAAsBJ,MAGxBP,EAAAC,EAAAC,cAAA,QAAWI,KACVC,EACCP,EAAAC,EAAAC,cAAA,+BAEAF,EAAAC,EAAAC,cAAA,iFASVF,EAAAC,EAAAC,cAAA,UAAQU,QAASzC,KAAKW,gBAAtB,4BAxFU+B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.f5865c2f.chunk.js","sourcesContent":["import firebase from 'firebase';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport { config } from './firebase.config';\n\nfirebase.initializeApp(config);\n\nconst db = firebase.firestore();\nconst storage = firebase.storage();\n\ndb.settings({\n  timestampsInSnapshots: true,\n});\n\nconst getThumbUrl = imageUrl => {\n  const imageName = imageUrl.substr(imageUrl.lastIndexOf('/') + 1);\n  const thumbImageName = `thumb_${imageName}`;\n  const extractedUrl = imageUrl.substr(0, imageUrl.lastIndexOf('/') + 1);\n  const finalUrl = `${extractedUrl}${thumbImageName}`;\n  return finalUrl;\n};\n\nexport { db, storage, getThumbUrl };\n","const config = {\n  apiKey: 'AIzaSyCfb5j-BP1l_oJi-ru9AdsYTYq9CXyBs0I',\n  authDomain: 'headless-graphql.firebaseapp.com',\n  databaseURL: 'https://headless-graphql.firebaseio.com',\n  projectId: 'headless-graphql',\n  storageBucket: 'headless-graphql.appspot.com',\n  messagingSenderId: '678900724624',\n};\nexport { config };\n","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone';\nimport classNames from 'classnames';\nimport { storage, getThumbUrl } from './init';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n  state = {\n    image: [],\n  };\n  onDrop = Images => {\n    console.log(Images);\n    this.setState({ image: Images });\n  };\n  sendToFirebase = () => {\n    const { image } = this.state;\n    if (image.length) {\n      var imageRef = storage.ref(image[0].name);\n      try {\n        const uploadTask = imageRef.put(image[0]);\n        uploadTask.on(\n          'state_changed', // or 'state_changed'\n          function(snapshot) {\n            var progress =\n              (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            console.log('Upload is ' + progress + '% done');\n            switch (snapshot.state) {\n              case 'PAUSED': // or 'paused'\n                console.log('Upload is paused');\n                break;\n              case 'RUNNING': // or 'running'\n                console.log('Upload is running');\n                break;\n            }\n          },\n          function(error) {\n            switch (error.code) {\n              case 'storage/unauthorized':\n                console.log('not auth');\n                break;\n\n              case 'storage/canceled':\n                console.log('calcelled');\n                break;\n\n              case 'storage/unknown':\n                console.log('unknown');\n                break;\n            }\n          },\n          function() {\n            // Upload completed successfully, now we can get the download URL\n            uploadTask.snapshot.ref\n              .getDownloadURL()\n              .then(function(downloadURL) {\n                console.log('File available at', downloadURL);\n                const thumb = getThumbUrl(downloadURL);\n                console.log(thumb, 'again');\n              });\n          }\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n  render() {\n    return (\n      <div>\n        <Dropzone onDrop={this.onDrop}>\n          {({ getRootProps, getInputProps, isDragActive }) => {\n            return (\n              <div\n                {...getRootProps()}\n                className={classNames('dropzone', {\n                  'dropzone--isActive': isDragActive,\n                })}\n              >\n                <input {...getInputProps()} />\n                {isDragActive ? (\n                  <p>Drop files here...</p>\n                ) : (\n                  <p>\n                    Try dropping some files here, or click to select files to\n                    upload.\n                  </p>\n                )}\n              </div>\n            );\n          }}\n        </Dropzone>\n        <button onClick={this.sendToFirebase}>Send to firebase</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}